name: Linux Server Build - Template

on:  
  workflow_call:
    inputs:
      beamProj:
        description: 'The BEAMPROJ we are building. Ie: BEAMPROJ_Sandbox or BEAMPROJ_HathoraDemo.'
        required: true
        default: 'BEAMPROJ_Sandbox'
        type: string
    secrets:
      GHCR_ACTOR:
        required: true
      GHCR_TOKEN:
        required: true
      
permissions:
  contents: write

jobs:
  deploy:
    runs-on: unreal-builder
    steps:
      # Gets the repo
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            Intermediate/
            Saved/
            UnrealSDK.sln
          key: ${{ runner.os }}${{ inputs.beamProj }}${{ hashFiles('Source/**') }}
          restore-keys: ${{ runner.os }}${{ inputs.beamProj }}
     
      # Installs .NET 8 so we can run init_repo.sh
      - uses: actions/setup-dotnet@v4
        with:
         dotnet-version: 8.x            
      
      # Run init_repo.sh (needed to setup the project correctly locally)     
      - name: Prepare Repository for compilation
        run: bash init_repo.sh
      
      # Sets the BEAMPROJ based on the input to this workflow.      
      - name: Set BeamProjOverride.txt
        run: |
          echo ${{ inputs.beamProj }} > BeamProjOverride.txt |
          cat BeamProjOverride.txt
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Login to GitHub docker registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_ACTOR }}
          password: ${{ secrets.GHCR_TOKEN }}
      
      # Pull the base image and build the project
      - name: Pull base image and build
        run: bash docker_run_linux.sh server
      
      # Compress the results      
      - name: Compress Directory
        run: cd packaged/LinuxServer &&
          tar cvzf ../../linux_server_${{ inputs.beamProj }}.tar.gz * &&
          cd ../../
      
      # Uploads the artifacts so we can download the build      
      - name: Upload Compressed Folder as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux Server Build - ${{ inputs.beamProj }}
          path: linux_server_${{ inputs.beamProj }}.tar.gz