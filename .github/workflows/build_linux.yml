name: Linux Build - Template

on:  
  workflow_call:
    inputs:
      beamProj:
        description: 'The BEAMPROJ we are building. Ie: BEAMPROJ_Sandbox or BEAMPROJ_HathoraDemo.'
        required: true
        default: 'BEAMPROJ_Sandbox'
        type: string
      buildType:
        type: string
        description: 'Either "client", for regular builds, or "server". for dedicated server builds.'
        required: true
        default: "client"      
    secrets:
      GHCR_ACTOR:
        required: true
      GHCR_TOKEN:
        required: true
      
permissions:
  contents: write

jobs:
  build:
    runs-on: unreal-builder
    steps:
      # Gets the Unreal Repo and the CLI repo
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          path: BeamableUnreal/
          
      - uses: actions/checkout@v4
        with:
          repository: beamable/BeamableProduct
          fetch-depth: 0
          lfs: true
          path: BeamableProduct/
          ref: main
          
      # Sets the buildType ENV var as either server or client.
      - name: Set buildType ENV var
        id: set-build-type
        run: echo "buildType=${{ inputs.buildType }}" >> $GITHUB_ENV
      - name: Check buildType ENV var
        id: check-build-type
        run: echo "${{ env.buildType }}"
      
      # Caches the UnrealSDK repo's Intermediate and Saved folders
      - uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            BeamableUnreal/Intermediate/
            BeamableUnreal/Saved/
            BeamableUnreal/UnrealSDK.sln
          key: ${{ runner.os }}-${{ inputs.beamProj }}-${{ env.buildType }}-${{ hashFiles('/BeamableUnreal/Source/**') }}
          restore-keys: ${{ runner.os }}-${{ inputs.beamProj }}-${{ env.buildType }}-
     
      # Installs .NET 8 so we can run init_repo.sh
      - uses: actions/setup-dotnet@v4
        with:
         dotnet-version: 8.x            
      
      # Run Set-Packages for Unreal
      - name: Run Set Packages for local build of the CLI
        working-directory: ./BeamableProduct
        run: bash set-packages.sh "${{ github.workspace }}/BeamableUnreal/" "UNREAL_NugetSource" "" "" "${{ github.workspace }}/BeamableUnreal/Microservices"
      
      # Run init_repo.sh (needed to setup the project correctly locally)     
      - name: Prepare Repository for compilation
        working-directory: ./BeamableUnreal
        run: bash init_repo.sh
      
      # Sets the BEAMPROJ based on the input to this workflow.      
      - name: Set BeamProjOverride.txt
        working-directory: ./BeamableUnreal
        run: |          
          echo ${{ inputs.beamProj }} > BeamProjOverride.txt |
          cat BeamProjOverride.txt
          
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Login to GitHub docker registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_ACTOR }}
          password: ${{ secrets.GHCR_TOKEN }}
      
      # Pull the base image and build the project
      - name: Pull base image and build
        working-directory: ./BeamableUnreal
        run: bash docker_run_linux.sh ${{ env.buildType }}
      
      # Compress the results      
      - name: Compress Directory
        working-directory: ./BeamableUnreal        
        run: cd packaged/Linu* &&
          tar cvzf ../../linux_${{ env.buildType }}_${{ inputs.beamProj }}_${{ env.GITHUB_SHA }}.tar.gz * &&
          cd ../../
      
      # Uploads the artifacts so we can download the build       
      - name: Upload Compressed Folder as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-${{ inputs.beamProj }}-${{ env.buildType }}-${{ env.GITHUB_SHA }}
          path: linux_${{ inputs.beamProj }}_${{ env.buildType }}_${{ env.GITHUB_SHA }}.tar.gz
          overwrite: true # If we ever re-run this reusable workflow in the same commit hash, this makes sure it replaces it.