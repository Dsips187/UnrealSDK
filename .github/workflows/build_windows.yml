name: Windows Build - Template

on:
  workflow_call:
    inputs:
      beamProj:
        description: "The BEAMPROJ we are building. Ie: BEAMPROJ_Sandbox or BEAMPROJ_HathoraDemo."
        required: true
        default: "BEAMPROJ_Sandbox"
        type: string
      buildType:
        type: string
        description: 'Either "client", for regular builds, or "server". for dedicated server builds.'
        required: true
        default: "client"

permissions:
  contents: write

jobs:
  build:
    runs-on: [self-hosted, Windows]
    steps:
      # Gets the repo
      - uses: actions/checkout@v4
        with:
          lfs: true

      # Sets the buildType ENV var as either server or client.
      - name: Set buildType ENV var
        id: set-build-type
        run: echo "buildType=$("${{ inputs.buildType }}")" >> $GITHUB_ENV
      - name: Check buildType ENV var
        id: check-build-type
        run: echo "${{ env.buildType }}"

      # Installs .NET 8 so we can run init_repo.sh
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      # Make sure the .NET's paths are added to the shell's path ENV VAR
      - run: Add-Content $env:GITHUB_PATH "C:\Program Files\dotnet"
      - run: Add-Content $env:GITHUB_PATH "~\.dotnet\tools"
        
      # Caches the UnrealSDK repo's Intermediate and Saved folders
      - uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            Intermediate/
            Saved/
            UnrealSDK.sln
          key: ${{ runner.os }}-${{ inputs.beamProj }}-${{ hashFiles('Source/**') }}
          restore-keys: ${{ runner.os }}-${{ inputs.beamProj }}-

      # Run init_repo.sh (needed to setup the project correctly locally)
      - name: Prepare Repository for Compilation
        run: bash init_repo.sh

      # Sets the BEAMPROJ based on the input to this workflow.
      - name: Set BeamProjOverride.txt
        run: |
          echo ${{ inputs.beamProj }} > BeamProjOverride.txt |
          cat BeamProjOverride.txt

      # Builds the image
      - name: Build image
        run: .\docker_run_windows.ps1

      # Compress the results
      - name: Compress Directory
        run: powershell Compress-Archive PackagedProject windows_${{ env.buildType }}_${{ inputs.beamProj }}_${{ env.GITHUB_SHA }}.zip

      # Uploads the artifacts so we can download the build
      - name: Upload Compressed Folder as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-${{ inputs.beamProj }}-${{ env.buildType }}-${{ env.GITHUB_SHA }}
          path: windows_${{ inputs.beamProj }}_${{ env.buildType }}_${{ env.GITHUB_SHA }}.zip
